{"version":3,"sources":["assets/win.mp3","Cell.js","Board.js","Lightsout.js","serviceWorker.js","index.js"],"names":["module","exports","Cell","handleClick","e","props","lightCellsAroundMe","classes","this","isLit","className","onClick","Component","winSound","Audio","win","cellClick","Board","state","hasWon","board","createBoard","clicks","countClicks","setState","cs","play","i","nrows","row","j","ncols","push","coord","split","map","Number","lightCell","every","cell","tableBoard","key","lightCellsAround","defaultProps","chance","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,iC,wQCc5BC,G,uNAVdC,YAAc,SAACC,GACd,EAAKC,MAAMC,sB,wEAIX,IAAIC,EAAU,SAAWC,KAAKH,MAAMI,MAAQ,WAAa,IACzD,OAAO,wBAAIC,UAAWH,EAASI,QAASH,KAAKL,kB,GAP5BS,c,OCEbC,EAAW,IAAIC,M,OAAMC,GACrBC,EAAY,IAAIF,MAAM,yDAEtBG,E,2MAMLC,MAAQ,CACPC,QAAQ,EACRC,MAAO,EAAKC,cACZC,OAAQ,G,EAETC,YAAc,WACb,EAAKC,UAAS,SAACC,GAAD,MAAS,CAAEH,OAAQG,EAAGH,OAAS,MAC7CN,EAAUU,Q,6EAIV,IADA,IAAIN,EAAQ,GACHO,EAAI,EAAGA,EAAInB,KAAKH,MAAMuB,MAAOD,IAAK,CAE1C,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAItB,KAAKH,MAAM0B,MAAOD,IAErCD,EAAIG,KAAK,GAEVZ,EAAMY,KAAKH,GAEZ,OAAOT,I,uCAGSa,GAAQ,IAAD,EACAzB,KAAKH,MAAtB0B,EADiB,EACjBA,MAAOH,EADU,EACVA,MACTR,EAAQZ,KAAKU,MAAME,MAFA,EAGRa,EAAMC,MAAM,KAAKC,IAAIC,QAHb,mBAGjBT,EAHiB,KAGdG,EAHc,KAKvB,SAASO,EAAUV,EAAGG,GACjBA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACxCR,EAAMO,GAAGG,IAAMV,EAAMO,GAAGG,IAI1BO,EAAUV,EAAGG,GACbO,EAAUV,EAAGG,EAAI,GACjBO,EAAUV,EAAGG,EAAI,GACjBO,EAAUV,EAAI,EAAGG,GACjBO,EAAUV,EAAI,EAAGG,GAEjB,IAAIX,EAASC,EAAMkB,OAAM,SAACT,GAAD,OAASA,EAAIS,OAAM,SAACC,GAAD,OAAWA,QACvD/B,KAAKgB,SAAS,CAAEJ,MAAOA,EAAOD,OAAQA,M,+BAG7B,IAAD,OACR,GAAIX,KAAKU,MAAMC,OAEd,OADAN,EAASa,OACF,wBAAIhB,UAAU,aAAd,WAIR,IADA,IAAI8B,EAAa,GACRb,EAAI,EAAGA,EAAInB,KAAKH,MAAMuB,MAAOD,IAAK,CAE1C,IADA,IAAIE,EAAM,GADgC,WAEjCC,GACR,IAAIG,EAAK,UAAMN,EAAN,YAAWG,GACpBD,EAAIG,KACH,kBAAC,EAAD,CACCS,IAAKR,EACLxB,MAAO,EAAKS,MAAME,MAAMO,GAAGG,GAC3BxB,mBAAoB,kBAAM,EAAKoC,iBAAiBT,QAN1CH,EAAI,EAAGA,EAAItB,KAAKH,MAAM0B,MAAOD,IAAM,EAAnCA,GAUTU,EAAWR,KAAK,wBAAIS,IAAKd,GAAIE,IAE9B,OACC,6BACC,wBAAInB,UAAU,aAAd,KACG,0BAAMA,UAAU,UAAhB,KADH,KACsC,0BAAMA,UAAU,UAAhB,KADtC,KACyE,0BAAMA,UAAU,UAAhB,KADzE,KAGA,yBAAKA,UAAU,QAAf,qKAIA,uBAAGA,UAAU,SAAb,UAA6BF,KAAKU,MAAMI,QACxC,2BAAOX,QAASH,KAAKe,YAAab,UAAU,SAC3C,+BAAQ8B,S,GAjFO5B,aAAdK,EACE0B,aAAe,CACrBf,MAAO,EACPG,MAAO,EACPa,OAAQ,KAoFK3B,QCnFA4B,E,iLARb,OACC,yBAAKnC,UAAU,OACd,kBAAC,EAAD,W,GAJcE,aCSEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.deb67e1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/win.97e9809a.mp3\";","import React, { Component } from 'react';\r\nimport './Cell.css';\r\n\r\nclass Cell extends Component {\r\n\thandleClick = (e) => {\r\n\t\tthis.props.lightCellsAroundMe();\r\n\t};\r\n\r\n\trender() {\r\n\t\tlet classes = 'Cell ' + (this.props.isLit ? 'Cell-lit' : '');\r\n\t\treturn <td className={classes} onClick={this.handleClick} />;\r\n\t}\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport './Board.css';\r\nimport Cell from './Cell';\r\nimport win from './assets/win.mp3';\r\n\r\nconst winSound = new Audio(win);\r\nconst cellClick = new Audio('https://s3.amazonaws.com/freecodecamp/simonSound2.mp3');\r\n\r\nclass Board extends Component {\r\n\tstatic defaultProps = {\r\n\t\tnrows: 5,\r\n\t\tncols: 5,\r\n\t\tchance: 0.25\r\n\t};\r\n\tstate = {\r\n\t\thasWon: false,\r\n\t\tboard: this.createBoard(),\r\n\t\tclicks: 0\r\n\t};\r\n\tcountClicks = () => {\r\n\t\tthis.setState((cs) => ({ clicks: cs.clicks + 1 }));\r\n\t\tcellClick.play();\r\n\t};\r\n\tcreateBoard() {\r\n\t\tlet board = [];\r\n\t\tfor (let i = 0; i < this.props.nrows; i++) {\r\n\t\t\tlet row = [];\r\n\t\t\tfor (let j = 0; j < this.props.ncols; j++) {\r\n\t\t\t\t//row.push(Math.random() < this.props.chance);\r\n\t\t\t\trow.push(1);\r\n\t\t\t}\r\n\t\t\tboard.push(row);\r\n\t\t}\r\n\t\treturn board;\r\n\t}\r\n\r\n\tlightCellsAround(coord) {\r\n\t\tlet { ncols, nrows } = this.props;\r\n\t\tlet board = this.state.board;\r\n\t\tlet [ i, j ] = coord.split('-').map(Number);\r\n\r\n\t\tfunction lightCell(i, j) {\r\n\t\t\tif (j >= 0 && j < ncols && i >= 0 && i < nrows) {\r\n\t\t\t\tboard[i][j] = !board[i][j];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlightCell(i, j);\r\n\t\tlightCell(i, j - 1);\r\n\t\tlightCell(i, j + 1);\r\n\t\tlightCell(i - 1, j);\r\n\t\tlightCell(i + 1, j);\r\n\r\n\t\tlet hasWon = board.every((row) => row.every((cell) => !cell));\r\n\t\tthis.setState({ board: board, hasWon: hasWon });\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasWon) {\r\n\t\t\twinSound.play();\r\n\t\t\treturn <h1 className=\"neon-blue\">You Won</h1>;\r\n\t\t}\r\n\r\n\t\tlet tableBoard = [];\r\n\t\tfor (let i = 0; i < this.props.nrows; i++) {\r\n\t\t\tlet row = [];\r\n\t\t\tfor (let j = 0; j < this.props.ncols; j++) {\r\n\t\t\t\tlet coord = `${i}-${j}`;\r\n\t\t\t\trow.push(\r\n\t\t\t\t\t<Cell\r\n\t\t\t\t\t\tkey={coord}\r\n\t\t\t\t\t\tisLit={this.state.board[i][j]}\r\n\t\t\t\t\t\tlightCellsAroundMe={() => this.lightCellsAround(coord)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\ttableBoard.push(<tr key={i}>{row}</tr>);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className=\"neon-blue\">\r\n\t\t\t\t\tLi<span className=\"letter\">g</span>ht<span className=\"letter\">s</span> O<span className=\"letter\">u</span>t\r\n\t\t\t\t</h1>\r\n\t\t\t\t<div className=\"info\">\r\n\t\t\t\t\tWin the game by switching all the lights off, preferably in as few button presses as possible.\r\n\t\t\t\t\tPressing any of the lights will toggle it and the adjacent lights.\r\n\t\t\t\t</div>\r\n\t\t\t\t<p className=\"score\">Moves: {this.state.clicks}</p>\r\n\t\t\t\t<table onClick={this.countClicks} className=\"Board\">\r\n\t\t\t\t\t<tbody>{tableBoard}</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\nimport './Lightsout.css';\nimport Board from './Board';\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Board />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './Lightsout';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}